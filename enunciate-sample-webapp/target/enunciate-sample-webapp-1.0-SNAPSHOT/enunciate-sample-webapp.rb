#
# 
#
# Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.
#
require 'json'

# adding necessary json serialization methods to standard classes.
class Object
  def to_jaxb_json_hash
    return self
  end
  def self.from_json o
    return o
  end
end

class String
  def self.from_json o
    return o
  end
end

class Boolean
  def self.from_json o
    return o
  end
end

class Numeric
  def self.from_json o
    return o
  end
end

class Time
  #json time is represented as number of milliseconds since epoch
  def to_jaxb_json_hash
    return (to_i * 1000) + (usec / 1000)
  end
  def self.from_json o
    if o.nil?
      return nil
    else
      return Time.at(o / 1000, (o % 1000) * 1000)
    end
  end
end

class Array
  def to_jaxb_json_hash
    a = Array.new
    each { | _item | a.push _item.to_jaxb_json_hash }
    return a
  end
end

class Hash
  def to_jaxb_json_hash
    h = Hash.new
    each { | _key, _value | h[_key.to_jaxb_json_hash] = _value.to_jaxb_json_hash }
    return h
  end
end

module EnunciateHelpers
  LAMB_CLASS_AWARE = ->(_item) do
    java_clazz = _item['@class']
    clazz_array_parts = java_clazz.split('.')
    short_clazz = clazz_array_parts.pop
    clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
    clazz = clazz_package + "::" + short_clazz
    Object.const_get(clazz).send(:from_json, _item)
  end
end


module Com

module Webcohesion

module Enunciate

module Sample

module Model

  # (no documentation provided)
  class Person 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :email
    # (no documentation provided)
    attr_accessor :alias
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :picture

    # the json hash for this Person
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['email'] = email.to_jaxb_json_hash unless email.nil?
      _h['alias'] = alias.to_jaxb_json_hash unless alias.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['picture'] = picture.to_jaxb_json_hash unless picture.nil?
      return _h
    end

    # the json (string form) for this Person
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Person with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push String.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['email'].nil?
          _oa = _o['email']
            if(_oa.is_a? Hash)
              @email = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @email =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @email = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @email.push String.from_json(_item)
                 else
                   @email.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @email = _oa
            end
          end
        if !_o['alias'].nil?
          _oa = _o['alias']
            if(_oa.is_a? Hash)
              @alias = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alias =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alias = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alias.push String.from_json(_item)
                 else
                   @alias.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alias = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  Com::Webcohesion::Enunciate::Sample::Model::Name.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push Com::Webcohesion::Enunciate::Sample::Model::Name.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['picture'].nil?
          _oa = _o['picture']
            if(_oa.is_a? Hash)
              @picture = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @picture =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @picture = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @picture.push String.from_json(_item)
                 else
                   @picture.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @picture = _oa
            end
          end
    end

    # constructs a Person from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Com

module Webcohesion

module Enunciate

module Sample

module Model

  # (no documentation provided)
  class Name 

    # (no documentation provided)
    attr_accessor :fullName
    # The given name.
    attr_accessor :givenName
    # The surname.
    attr_accessor :surname

    # the json hash for this Name
    def to_jaxb_json_hash
      _h = {}
      _h['full_name'] = fullName.to_jaxb_json_hash unless fullName.nil?
      _h['givenName'] = givenName.to_jaxb_json_hash unless givenName.nil?
      _h['surname'] = surname.to_jaxb_json_hash unless surname.nil?
      return _h
    end

    # the json (string form) for this Name
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Name with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['full_name'].nil?
          _oa = _o['full_name']
            if(_oa.is_a? Hash)
              @fullName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @fullName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @fullName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @fullName.push String.from_json(_item)
                 else
                   @fullName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @fullName = _oa
            end
          end
        if !_o['givenName'].nil?
          _oa = _o['givenName']
            if(_oa.is_a? Hash)
              @givenName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @givenName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @givenName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @givenName.push String.from_json(_item)
                 else
                   @givenName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @givenName = _oa
            end
          end
        if !_o['surname'].nil?
          _oa = _o['surname']
            if(_oa.is_a? Hash)
              @surname = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @surname =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @surname = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @surname.push String.from_json(_item)
                 else
                   @surname.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @surname = _oa
            end
          end
    end

    # constructs a Name from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end
